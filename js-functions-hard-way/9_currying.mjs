// https://ru.hexlet.io/courses/js-functions-hard-way/lessons/currying/exercise_unit
// https://ru.hexlet.io/code_reviews/1203109

// JS: Функциональное программирование
// Каррирование
// ---------------------------------------

/*
Удивительно, но факт — условные конструкции можно реализовать самостоятельно
с использованием одних лишь каррированных функций.
В этой практике мы реализуем упрощённую версию, имитирующую работу условной
конструкции if.
Экспортируйте три функции True, False, If, внутри которых есть только функции.
То есть нельзя пользоваться встроенным в язык условным оператором if, а также
true и false.
Сами функции должны быть каррированы.

Подсказки
Общая схема работы функций такова:

If(func)('one')('two'); // ?

То есть, в итоге должно вернуться то или иное значение, в зависимости от того, какая функция передана на вход If.

Если функции If была передана True, то выражение ниже вернёт значение аргумента первого вызова (one):

const ConditionFunction = If(True);
ConditionFunction('one')('two'); // one

Если функции If была передана False, то выражение ниже вернёт значение аргумента второго вызова (two):

const ConditionFunction = If(False);
ConditionFunction('one')('two'); // two

*/

const True = x => y => x;
const False = x => y => y;
const If = func => func;

// Пример использования
const ConditionFunction = If(True);
console.log(ConditionFunction('one')('two')); // Вернет 'one'

const ConditionFunction2 = If(False);
console.log(ConditionFunction2('one')('two')); // Вернет 'two'

console.log(If(True)('one')('two'));  // one
console.log(If(False)('one')('two')); // two

/* 
В этой реализации функции True и False возвращают функции, которые принимают
два аргумента и возвращают первый или второй аргумент соответственно. Функция
If просто возвращает переданную ей функцию func, и в зависимости от этой функции,
либо будет возвращен первый аргумент, либо второй. */

// Hexlet's version
/*
export const True = (x) => () => x;
export const False = () => (y) => y;

export const If = (f) => f;

Пример использования функции:
If(True)('one')('two'); // 'one'

Передаём в функцию If функцию True, возвращается так же функция.
If(True); // (x) => () => x

В эту функцию передаём в качестве аргумента x значение 'one'
и делаем вызов. Получаем вложенную функцию.
If(True)('one'); // () => 'one'

Вызываем функцию с предыдущего шага и передаём в неё 'two'.
Это значение игнорируется, так как вложенная функция
не принимает аргументов и возвращает значение 'one'.
If(True)('one')('two'); // 'one'

С False функция If работает аналогично.
If(False)('one')('two'); // 'two'

Альтернативный способ определения функций:
const True = (x) => {
  return () => {
    return x;
  };
};

const False = () => {
  return (y) => {
    return y;
  };
};

const If = (f) => {
  return f;
};
*/
// END

